import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  ChevronRight,
  ChevronLeft,
  Clock,
  Flag,
  BookOpen,
  Target,
  CheckCircle,
  Home,
  ZoomIn,
  RotateCcw,
  Brain,
  Lightbulb,
  Star,
  Eye,
  ArrowRight,
  ArrowLeft,
  Timer,
  Award,
  Bookmark,
  FolderPlus
} from 'lucide-react';
import { useExamStore } from '../store/examStore';
import QuestionToFolderDialog from './QuestionToFolderDialog';

const QuestionDisplay = () => {
  const [isTextEnlarged, setIsTextEnlarged] = useState(false);
  const [isInstructionModalOpen, setIsInstructionModalOpen] = useState(false);
  const [windowWidth, setWindowWidth] = useState(typeof window !== 'undefined' ? window.innerWidth : 1024);
  const [isFolderDialogOpen, setIsFolderDialogOpen] = useState(false);

  const {
    examQuestions,
    currentQuestionIndex,
    currentSection,
    userAnswers,
    deferredQuestions,
    examMode,
    reviewMode,
    timerActive,
    timeRemaining,
    sectionReviewMode,
    hasSeenSectionReview,
    returnedFromSectionReview,
    reviewedSection,
    hideDeferButton,
    selectAnswer,
    toggleDeferred,
    nextQuestion,
    previousQuestion,
    getQuestionStats,
    getCurrentExamInfo,
    goToQuestion,
    setReviewMode,
    goToSectionReview
  } = useExamStore();

  // Handle window resize for responsive design
  useEffect(() => {
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };

    if (typeof window !== 'undefined') {
      window.addEventListener('resize', handleResize);
      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }
  }, []);

  // Add keyboard navigation
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
        return;
      }

      const currentQuestionNumber = currentQuestionIndex + 1;
      const isLastQuestionInSection = currentQuestionNumber % 13 === 0;

      switch (event.key) {
        case 'ArrowLeft':
          event.preventDefault();
          if (canProceed) { // Assuming canProceed is always true for next
            handleNext();
          }
          break;
        case 'ArrowRight':
          event.preventDefault();
          if (canGoPrevious()) {
            handlePrevious();
          }
          break;
        case '1':
        case '2':
        case '3':
        case '4':
          event.preventDefault();
          const choiceIndex = parseInt(event.key) - 1;
          if (currentQuestion && currentQuestion.choices && choiceIndex < currentQuestion.choices.length) {
            handleAnswerSelect(choiceIndex);
          }
          break;
        default:
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [currentQuestionIndex, examQuestions, deferredQuestions, examMode, currentSection]); // Added dependencies for handleNext/handlePrevious

  const getDisplayQuestionNumber = () => {
    if (examMode === 'sectioned') {
      const questionInSection = (currentQuestionIndex % 13) + 1;
      return questionInSection;
    } else {
      return currentQuestionIndex + 1;
    }
  };

  const getTotalQuestionsDisplay = () => {
    if (examMode === 'sectioned') {
      return 13;
    } else {
      return examQuestions.length;
    }
  };

  const highlightChoiceWords = (questionText, choices, questionType) => {
    if (questionType !== 'error' || !choices || !questionText) {
      return questionText;
    }

    let highlightedText = questionText;

    const sortedChoices = [...choices].sort((a, b) => b.length - a.length);

    const removeDiacritics = (text) => {
      return text.replace(/[\u064B-\u0652\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/g, "");
    };

    const normalizeHamza = (text) => {
      return text
        .replace(/[أإآ]/g, 'ا')
        .replace(/[ؤ]/g, 'و')
        .replace(/[ئ]/g, 'ي');
    };

    const getCoreWord = (word) => {
      let cleanedWord = word.replace(/[،,\.؛;:!؟?]/g, '');

      let core = normalizeHamza(removeDiacritics(cleanedWord));

      core = core.replace(/^و/, '');

      if (core.startsWith('بال')) {
        core = core.substring(3);
      }
      else if (core.startsWith('لال')) {
        core = core.substring(3);
      }
      else if (core.startsWith('ب')) {
        core = core.substring(1);
        if (core.startsWith('ال')) {
          core = core.substring(2);
        }
      }
      else if (core.startsWith('ل')) {
        core = core.substring(1);
        if (core.startsWith('ال')) {
          core = core.substring(2);
        }
      }
      else if (core.startsWith('ال')) {
        core = core.substring(2);
      }

      core = core.replace(/^(ف|ك|س)/, '');

      if (core.endsWith('وا')) {
        core = core.slice(0, -2) + 'و';
      }

      core = core.replace(/(ه|ها|هم|هن|ك|كم|كن|ي|نا|ون|ين|ات)$/, '');

      return core;
    };

    sortedChoices.forEach(choice => {
      if (choice && choice.trim()) {
        const trimmedChoice = choice.trim();

        const wordsInChoice = trimmedChoice.split(/[\s\(\)\[\]،,\.؛;:]+/).filter(word => word.length > 0);

        wordsInChoice.forEach(wordInChoice => {
          const coreWordInChoice = getCoreWord(wordInChoice);

          const wordsInQuestion = questionText.split(/\s+/);

          wordsInQuestion.forEach(wordInQuestion => {
            const coreWordInQuestion = getCoreWord(wordInQuestion);

            if (coreWordInQuestion === coreWordInChoice && coreWordInChoice.length > 0) {
              if (!highlightedText.includes(`<span style="color: red; font-weight: bold;">${wordInQuestion}</span>`)) {
                highlightedText = highlightedText.replace(new RegExp(`\\b${wordInQuestion}\\b`, 'g'), `<span style="color: red; font-weight: bold;">${wordInQuestion}</span>`);
              }
            }
          });
        });
      }
    });

    return highlightedText;
  };

  const renderHighlightedText = (text) => {
    return <div dangerouslySetInnerHTML={{ __html: text }} />;
  };

  if (!examQuestions || examQuestions.length === 0) {
    return (
      <div className="min-h-screen bg-[#eaf3fa] flex items-center justify-center" dir="rtl">
        <div className="text-center bg-white rounded-lg p-8 shadow-lg mx-4">
          <div className="bg-blue-100 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center">
            <Brain className="h-8 w-8 text-blue-600 animate-pulse" />
          </div>
          <div className="text-xl font-medium text-gray-900">جاري تحميل الأسئلة...</div>
          <div className="text-sm text-gray-600 mt-2">يرجى الانتظار</div>
        </div>
      </div>
    );
  }

  const currentQuestion = examQuestions[currentQuestionIndex];
  const selectedAnswer = userAnswers[currentQuestion.question_number];
  const isDeferred = deferredQuestions[currentQuestion.question_number];
  const isLastQuestion = currentQuestionIndex === examQuestions.length - 1;
  const isFirstQuestion = currentQuestionIndex === 0;
  const examInfo = getCurrentExamInfo();

  const canGoPrevious = () => {
    if (isFirstQuestion) return false;

    if (examMode !== 'sectioned') {
      return true;
    }

    const currentQuestionNumber = currentQuestionIndex + 1;
    const isFirstQuestionInSection = (currentQuestionNumber - 1) % 13 === 0;

    if (isFirstQuestionInSection && currentQuestionIndex > 0) {
      return false;
    }

    return true;
  };

  const canProceed = true; // This is always true, as next/section review logic handles progression

  const hasDeferredQuestionsInCurrentSection = () => {
    const isLastQuestion = currentQuestionIndex === examQuestions.length - 1;

    if (isLastQuestion) {
        return examQuestions.some(q => deferredQuestions[q.question_number]);
    }
    return examQuestions
      .filter(q => q.section === currentSection)
      .some(q => deferredQuestions[q.question_number]);
  };

  const handleAnswerSelect = (choiceIndex) => {
    selectAnswer(currentQuestion.question_number, choiceIndex);
  };

  const handleDeferToggle = () => {
    toggleDeferred(currentQuestion.question_number);
  };

  // الدالة المُحدثة لمعالجة الانتقال للسؤال التالي
  const handleNext = () => {
    const currentQuestionNumber = currentQuestionIndex + 1;
    const isLastQuestionInSection = currentQuestionNumber % 13 === 0;

    // إذا كنا في آخر سؤال في القسم، لا ننتقل للقسم التالي
    if (isLastQuestionInSection) {
      // لا نفعل شيئاً - نبقى في نفس السؤال
      return;
    }

    // إذا كنا في آخر سؤال في الامتحان بالكامل
    if (isLastQuestion) {
      // يمكن إضافة منطق إنهاء الاختبار هنا
      console.log('انتهاء الاختبار');
      return;
    }

    // في الحالات العادية، متابعة للسؤال التالي
    nextQuestion();
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handlePrevious = () => {
    if (examMode !== 'sectioned') {
      previousQuestion();
      window.scrollTo({ top: 0, behavior: 'smooth' });
      return;
    }

    const currentQuestionNumber = currentQuestionIndex + 1;
    const isFirstQuestionInSection = (currentQuestionNumber - 1) % 13 === 0;

    if (isFirstQuestionInSection && currentQuestionIndex > 0) {
      return;
    }

    previousQuestion();
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleTextEnlarge = () => {
    setIsTextEnlarged(true);
  };

  const handleCloseEnlargedText = () => {
    setIsTextEnlarged(false);
  };

  const handleOpenInstructionModal = () => {
    setIsInstructionModalOpen(true);
  };

  const handleCloseInstructionModal = () => {
    setIsInstructionModalOpen(false);
  };

  const handleSectionReview = () => {
    goToSectionReview();
  };

  const shouldShowSectionReviewButton = () => {
    if (examMode !== 'sectioned') return false;
    
    const currentQuestionNumber = currentQuestionIndex + 1;
    const isLastQuestionInSection = currentQuestionNumber % 13 === 0;
    const isLastQuestionOfExam = currentQuestionIndex === examQuestions.length - 1;

    // Show on the last question of a section or the entire exam
    if (isLastQuestionInSection || isLastQuestionOfExam) {
        return true;
    }
    
    // Show if returning from section review
    if (returnedFromSectionReview) {
        return true;
    }

    // Show if there are deferred questions and the user has already seen the review page once
    if (hasDeferredQuestionsInCurrentSection() && hasSeenSectionReview) {
        return true;
    }

    return false;
  };

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const getQuestionTypeLabel = (type) => {
    const labels = {
      'analogy': 'التناظر اللفظي',
      'completion': 'إكمال الجمل',
      'error': 'الخطأ السياقي',
      'rc': 'استيعاب المقروء',
      'reading': 'فهم المقروء',
      'odd': 'المفردة الشاذة'
    };
    return labels[type] || type;
  };

  const getQuestionTypeIcon = (type) => {
    const icons = {
      'analogy': <Target className="h-4 w-4" />,
      'completion': <Lightbulb className="h-4 w-4" />,
      'error': <Eye className="h-4 w-4" />,
      'rc': <BookOpen className="h-4 w-4" />,
      'reading': <BookOpen className="h-4 w-4" />,
      'odd': <Star className="h-4 w-4" />
    };
    return icons[type] || <Brain className="h-4 w-4" />;
  };

  // تعليمات حسب النوع
  const INSTRUCTIONS = {
    'analogy': {
      title: 'التناظر اللفظي',
      text: 'في بداية كل سؤال مما يأتي، كلمتان ترتبطان بعلاقة معينة، تتبعهما أربعة أزواج من الكلمات، أحدها ترتبط فيه الكلمتان بعلاقة مشابهة للعلاقة بين الكلمتين في بداية السؤال. المطلوب هو: اختيار الإجابة الصحيحة'
    },
    'completion': {
      title: 'إكمال الجمل',
      text: 'تلي كل جملة من الجمل الآتية أربعة اختيارات، أحدها يكمل الفراغ أو الفراغات في الجملة إكمالاً صحيحاً. المطلوب هو: اختيار الإجابة الصحيحة'
    },
    'error': {
      title: 'الخطأ السياقي',
      text: 'في كل جملة مما يأتي أربع كلمات كل منها مكتوبة بخط غليظ. المطلوب هو: تحديد الكلمة التي لا يتفق معناها مع المعنى العام للجملة، (الخطأ ليس إملائياً ولا نحوياً)'
    },
    'rc': {
      title: 'استيعاب المقروء',
      text: 'السؤال التالي يتعلق بالنص المرفق، بعد السؤال هناك أربع اختيارات، واحد منها صحيح. المطلوب هو: قراءة النص بعناية، ثم اختيار الإجابة الصحيحة'
    },
    'reading': {
      title: 'استيعاب المقروء',
      text: 'السؤال التالي يتعلق بالنص المرفق، بعد السؤال هناك أربع اختيارات، واحد منها صحيح. المطلوب هو: قراءة النص بعناية، ثم اختيار الإجابة الصحيحة'
    },
    'odd': {
      title: 'المفردة الشاذة',
      text: 'في كل مجموعة من المجموعات الآتية أربع كلمات، ثلاث منها تنتمي إلى مجال واحد والرابعة مختلفة عنها. المطلوب هو: اختيار الكلمة المختلفة'
    }
  };

  const currentInstructions = INSTRUCTIONS[currentQuestion.type] || { title: '', text: '' };

  // Check if we're on mobile
  const isMobile = windowWidth <= 768;

  return (
    <div className="min-h-screen flex flex-col" style={{backgroundColor: '#F7F5F8'}} dir="rtl" key={currentQuestion.question_number}>
      {/* الشريط العلوي */}
      <div className="px-4 py-3 flex items-center justify-between" style={{backgroundColor: '#068479'}}>
        <div className="text-white font-bold text-lg">اختبار</div>
        <div className="text-white font-bold text-lg">OUR GOAL</div>
      </div>

      {/* المحتوى الرئيسي */}
      <div className="flex-1 flex pb-8">
        {/* العمود الأيسر - محتوى السؤال */}
        <div className="flex-1 flex flex-col" style={{height: 'calc(100vh - 200px)'}}>
          {/* شريط المعلومات */}
          <div className="px-4 py-2 flex items-center justify-between border-2 border-gray-300" style={{backgroundColor: '#DDE7F7'}}>
            <div className="flex items-center gap-2">
              <button 
                className={`px-3 py-1 border-2 rounded text-sm font-bold ${
                  isTextEnlarged ? 'bg-yellow-400 border-yellow-500' : 'bg-white border-gray-300'
                }`}
                onClick={handleTextEnlarge}
              >+A</button>
              <button 
                className="px-3 py-1 bg-white border border-gray-300 rounded text-sm"
                onClick={handleCloseEnlargedText}
              >A</button>
              <button 
                className="px-3 py-1 bg-white border border-gray-300 rounded text-sm"
                onClick={handleCloseEnlargedText}
              >-A</button>
            </div>
            <div className="text-gray-700 text-sm">
              {examQuestions.length} مجموع الأسئلة في الاختبار | الاسئلة المحلولة <span style={{color: '#068479', fontWeight: 'bold'}}>{Object.keys(userAnswers).length}</span>
            </div>
            <div className="text-gray-700 text-sm">رقم السؤال {getDisplayQuestionNumber()}</div>
          </div>

           {/* محتوى السؤال */}
           <div className="flex-1 flex flex-col pt-8">
             {/* محتوى السؤال الرئيسي */}
             <div className="flex-1 flex flex-col">
               {/* النص المقروء (إذا كان موجود) */}
               {(currentQuestion.type === 'rc' || currentQuestion.type === 'reading') && currentQuestion.passage && (
                 <div className="bg-gray-50 p-8 border-2 border-gray-300 mb-4">
                   <div className="text-2xl font-bold text-gray-900 mb-4 text-right">النص المقروء</div>
                   <div className={`text-gray-700 text-right leading-relaxed max-h-96 overflow-y-auto ${isTextEnlarged ? 'text-lg' : 'text-base'}`}>
                     {currentQuestion.passage}
                   </div>
                 </div>
               )}

               {/* السؤال والخيارات */}
               <div className="p-8 border-2 border-gray-300 flex-1">
                 {/* السؤال */}
                 <div className="text-2xl font-bold text-gray-900 mb-8 text-right">
                   السؤال {getDisplayQuestionNumber()}:
                 </div>
                 
                 <div className={`text-gray-900 mb-8 text-right ${isTextEnlarged ? 'text-2xl' : 'text-xl'}`}>
                   {currentQuestion.type === 'error' ?
                     renderHighlightedText(highlightChoiceWords(currentQuestion.question, currentQuestion.choices, currentQuestion.type)) :
                     currentQuestion.question
                   }
                 </div>

                 {/* الخيارات */}
                 <div className="space-y-4">
                   {currentQuestion.choices.map((choice, index) => (
                     <div
                       key={index}
                       className={`flex items-center gap-3 cursor-pointer text-gray-900 text-right ${isTextEnlarged ? 'text-xl' : 'text-lg'}`}
                       onClick={() => handleAnswerSelect(index)}
                     >
                       <input
                         type="radio"
                         name="answer"
                         value={index}
                         checked={selectedAnswer === index}
                         onChange={() => handleAnswerSelect(index)}
                         className={`${isTextEnlarged ? 'w-6 h-6' : 'w-5 h-5'}`}
                         style={{accentColor: '#068479'}}
                       />
                       <span>{choice}</span>
                     </div>
                   ))}
                 </div>
               </div>
             </div>
           </div>

          {/* زر حفظ والتالي في أسفل عمود الأسئلة */}
          <div className="p-4 border-2 border-gray-300 border-t-0">
            <div className="flex justify-end">
              <button
                className="px-6 py-2 rounded font-bold hover:opacity-90 transition-colors"
                style={{backgroundColor: '#068479', color: 'white'}}
                onClick={() => {
                  const currentQuestionNumber = currentQuestionIndex + 1;
                  const isLastQuestionInSection = currentQuestionNumber % 13 === 0;
                  const isLastQuestion = currentQuestionIndex === examQuestions.length - 1;

                  // إذا كنا في آخر سؤال في القسم، لا ننتقل للقسم التالي
                  if (isLastQuestionInSection && !isLastQuestion) {
                    return;
                  }

                  // إذا كنا في آخر سؤال في الامتحان، ننهي الاختبار
                  if (isLastQuestion) {
                    if (window.confirm('هل أنت متأكد من إنهاء الاختبار؟')) {
                      const { completeExam } = useExamStore.getState();
                      completeExam();
                    }
                    return;
                  }

                  // في الحالات العادية، متابعة للسؤال التالي
                  nextQuestion();
                  window.scrollTo({ top: 0, behavior: 'smooth' });
                }}
              >
                {currentQuestionIndex === examQuestions.length - 1 ? 'إنهاء الاختبار' : 'حفظ والتالي'}
              </button>
            </div>
          </div>
        </div>

        {/* الفراغ بين الأعمدة */}
        <div className="w-8"></div>

        {/* العمود الأيمن - لوحة التحكم */}
        <div className="w-80 border-2 border-gray-300 p-6 flex flex-col" style={{backgroundColor: '#DDE7F7', marginTop: '48px'}}>
          {/* الوقت المتبقي */}
          <div className="text-center mb-6">
            <div className="text-gray-600 text-sm mb-2">الوقت المتبقي</div>
            <div className="text-4xl font-bold text-gray-900">{formatTime(timeRemaining)}</div>
          </div>

          {/* معلومات المستخدم */}
          <div className="mb-6">
            <div className="text-gray-600 text-sm mb-1">اسم</div>
            <div className="text-gray-900 font-medium">ts1000008@nthb.moe.gov.sa</div>
          </div>

          {/* إحصائيات الأسئلة */}
          <div className="mb-6">
            <div className="text-gray-600 text-sm mb-2">عدد الأسئلة الرئيسية: 5</div>
            <div className="text-gray-600 text-sm mb-4">مجموع الأسئلة 13</div>
            
            {/* مربعات الإحصائيات */}
            <div className="grid grid-cols-2 gap-2 mb-4">
              <div className="bg-green-100 border border-green-300 rounded p-2 text-center">
                <div className="text-green-800 font-bold text-lg">{Object.keys(userAnswers).length}</div>
                <div className="text-green-700 text-xs">تمت الإجابة</div>
              </div>
              <div className="bg-red-100 border border-red-300 rounded p-2 text-center">
                <div className="text-red-800 font-bold text-lg">{examQuestions.length - Object.keys(userAnswers).length}</div>
                <div className="text-red-700 text-xs">لم تتم الإجابة</div>
              </div>
              <div className="bg-blue-100 border border-blue-300 rounded p-2 text-center">
                <div className="text-blue-800 font-bold text-lg">{Object.keys(deferredQuestions).filter(q => deferredQuestions[q]).length}</div>
                <div className="text-blue-700 text-xs">إجابة جزئية</div>
              </div>
              <div className="bg-gray-100 border border-gray-300 rounded p-2 text-center">
                <div className="text-gray-800 font-bold text-lg">0</div>
                <div className="text-gray-700 text-xs">لم تتم زيارته</div>
              </div>
            </div>
          </div>

          {/* أزرار التنقل */}
          <div className="mb-6">
            <div className="flex justify-center gap-2 mb-4">
              {Array.from({ length: 5 }, (_, i) => (
                <button 
                  key={i}
                  className={`w-8 h-8 rounded-full text-white font-bold ${
                    currentSection === (i + 1) ? 'bg-green-500' : 'bg-orange-500'
                  }`}
                  onClick={() => {
                    // يمكن إضافة منطق الانتقال للقسم المحدد
                    console.log(`الانتقال للقسم ${i + 1}`);
                  }}
                >
                  {i + 1}
                </button>
              ))}
            </div>
            
            {/* شبكة أرقام الأسئلة */}
            <div className="grid grid-cols-5 gap-0.5 bg-white p-2 rounded">
              {Array.from({ length: 13 }, (_, i) => {
                // حساب رقم السؤال الحقيقي في القسم الحالي
                const actualQuestionIndex = (currentSection - 1) * 13 + i;
                const isAnswered = userAnswers[examQuestions[actualQuestionIndex]?.question_number] !== undefined;
                const isDeferred = deferredQuestions[examQuestions[actualQuestionIndex]?.question_number];
                const isCurrent = actualQuestionIndex === currentQuestionIndex;
                
                let buttonClass = 'w-6 h-6 rounded text-white font-bold text-xs ';
                if (isCurrent) {
                  buttonClass += 'bg-green-500';
                } else if (isAnswered) {
                  buttonClass += 'bg-green-400';
                } else if (isDeferred) {
                  buttonClass += 'bg-blue-500';
                } else {
                  buttonClass += 'bg-orange-500';
                }
                
                return (
                  <button
                    key={i}
                    className={buttonClass}
                    onClick={() => goToQuestion(actualQuestionIndex)}
                    title={`السؤال ${i + 1} من القسم ${currentSection}${isAnswered ? ' - تمت الإجابة' : isDeferred ? ' - مؤجل' : ''}`}
                  >
                    {i + 1}
                  </button>
                );
              })}
            </div>
          </div>

          {/* فاصل */}
          <div className="h-4"></div>

          {/* زر إنهاء القسم/الاختبار */}
          <button 
            className={`w-full py-3 rounded font-bold transition-colors ${
              (currentQuestionIndex + 1) % 13 === 0 || currentQuestionIndex === examQuestions.length - 1
                ? 'bg-orange-500 text-white hover:bg-orange-600'
                : 'bg-gray-400 text-gray-600 cursor-not-allowed'
            }`}
            disabled={!((currentQuestionIndex + 1) % 13 === 0 || currentQuestionIndex === examQuestions.length - 1)}
            onClick={() => {
              const isLastSection = currentQuestionIndex === examQuestions.length - 1;
              const message = isLastSection 
                ? 'هل أنت متأكد من إنهاء الاختبار؟'
                : 'سيتم نقلك للقسم التالي مباشرة. هل تريد المتابعة؟';
              
              if (window.confirm(message)) {
                if (isLastSection) {
                  // إنهاء الاختبار وعرض النتائج
                  const { completeExam } = useExamStore.getState();
                  completeExam();
                } else {
                  // الانتقال للقسم التالي مباشرة
                  nextQuestion();
                  window.scrollTo({ top: 0, behavior: 'smooth' });
                }
              }
            }}
          >
            {currentQuestionIndex === examQuestions.length - 1 ? 'إنهاء الاختبار' : 'إنهاء القسم'}
          </button>
        </div>
      </div>

      {/* الشريط السفلي */}
      <div className="px-8 py-4 flex items-center justify-center" style={{backgroundColor: '#068479'}}>
        <div className="text-white font-bold">OUR GOAL</div>
      </div>

      {/* Dialog for adding question to folder */}
      <QuestionToFolderDialog
        isOpen={isFolderDialogOpen}
        onClose={() => setIsFolderDialogOpen(false)}
        questionId={currentQuestion?.id}
        questionText={currentQuestion?.question}
      />
    </div>
  );
};

export default QuestionDisplay;
